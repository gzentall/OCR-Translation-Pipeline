#!/usr/bin/env python3

"""
Google Translate API integration script for translating OCR text to English.
This script reads text files generated by the Vision OCR pipeline and translates them.

Prerequisites:
    * Google Cloud project with Translation API enabled
    * API key stored in .gcp_api_key file (same as Vision API)
    * pip install google-cloud-translate

Usage:
    python3 translate_google.py letters/work/document.vision.txt
"""

import sys
import os
import argparse
import requests
import json
from pathlib import Path


def get_api_key():
    """Read the Google Cloud API key from .gcp_api_key file."""
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    api_key_file = project_root / ".gcp_api_key"
    
    if not api_key_file.exists():
        print(f"Error: {api_key_file} not found. Please add your Google Cloud API key.")
        sys.exit(1)
    
    with open(api_key_file, 'r') as f:
        api_key = f.read().strip()
    
    if not api_key:
        print("Error: API key is empty in .gcp_api_key file")
        sys.exit(1)
    
    return api_key


def detect_language(text, api_key):
    """Detect the language of the input text using Google Translate API."""
    try:
        url = f"https://translation.googleapis.com/language/translate/v2/detect?key={api_key}"
        data = {
            'q': text[:1000]  # Use first 1000 chars for detection
        }
        response = requests.post(url, data=data)
        response.raise_for_status()
        result = response.json()
        return result['data']['detections'][0][0]['language']
    except Exception as e:
        print(f"Warning: Could not detect language: {e}")
        return 'auto'


def translate_text(text, target_language='en', source_language=None, api_key=None):
    """Translate text to target language using Google Translate API."""
    if not api_key:
        api_key = get_api_key()
    
    try:
        # If source language is not specified, detect it
        if not source_language:
            source_language = detect_language(text, api_key)
        
        # If source and target languages are the same, return original text
        if source_language == target_language:
            return text, source_language
        
        # Translate the text
        url = f"https://translation.googleapis.com/language/translate/v2?key={api_key}"
        data = {
            'q': text,
            'target': target_language,
            'source': source_language
        }
        response = requests.post(url, data=data)
        if response.status_code != 200:
            print(f"API Error {response.status_code}: {response.text}")
            return None, None
        result = response.json()
        
        translated_text = result['data']['translations'][0]['translatedText']
        detected_language = result['data']['translations'][0].get('detectedSourceLanguage', source_language)
        
        return translated_text, detected_language
    
    except Exception as e:
        print(f"Error during translation: {e}")
        return None, None


def main():
    parser = argparse.ArgumentParser(description='Translate OCR text using Google Translate API')
    parser.add_argument('input_file', help='Path to the .vision.txt file to translate')
    parser.add_argument('--target', '-t', default='en', help='Target language code (default: en)')
    parser.add_argument('--source', '-s', help='Source language code (auto-detect if not specified)')
    parser.add_argument('--output', '-o', help='Output file path (default: input_file.translated.txt)')
    
    args = parser.parse_args()
    
    input_path = Path(args.input_file)
    if not input_path.exists():
        print(f"Error: Input file {input_path} does not exist")
        sys.exit(1)
    
    # Set up output path
    if args.output:
        output_path = Path(args.output)
    else:
        # Remove .vision from the stem if present, then add .translated.txt
        stem = input_path.stem
        if stem.endswith('.vision'):
            stem = stem[:-7]  # Remove '.vision'
        output_path = input_path.parent / f"{stem}.translated.txt"
    
    # Read input text
    try:
        with open(input_path, 'r', encoding='utf-8') as f:
            text = f.read()
    except Exception as e:
        print(f"Error reading input file: {e}")
        sys.exit(1)
    
    if not text.strip():
        print("Warning: Input file is empty")
        return
    
    print(f"Translating {len(text)} characters from {input_path.name}...")
    
    # Get API key
    api_key = get_api_key()
    
    # Translate the text
    translated_text, detected_language = translate_text(
        text, 
        target_language=args.target,
        source_language=args.source,
        api_key=api_key
    )
    
    if translated_text is None:
        print("Translation failed")
        sys.exit(1)
    
    # Write translated text to output file
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(translated_text)
        
        print(f"Translation complete!")
        print(f"Detected source language: {detected_language}")
        print(f"Translated to: {args.target}")
        print(f"Output saved to: {output_path}")
        
    except Exception as e:
        print(f"Error writing output file: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

